const fs = require('fs');
const path = require('path');

// Create dist directory if it doesn't exist
if (!fs.existsSync('dist')) {
  fs.mkdirSync('dist', { recursive: true });
}

// Copy files from src to dist
const srcDir = path.join(__dirname, 'src');
const distDir = path.join(__dirname, 'dist');

// Define the file extensions that should be copied
const SUPPORTED_ASSETS = ['.html', '.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.json'];

/**
 * Checks if a given file should be copied based on its extension.
 * @param {string} fileName The name of the file to check.
 * @returns {boolean} True if the file should be copied, false otherwise.
 */
function shouldCopy(fileName) {
  return SUPPORTED_ASSETS.some(ext => fileName.endsWith(ext));
}

/**
 * Recursively copies supported asset files from a source directory to a destination directory.
 * @param {string} src The source directory path.
 * @param {string} dest The destination directory path.
 */
function copyFiles(src, dest) {
  if (!fs.existsSync(src)) {
    console.log(`Source directory '${src}' does not exist, creating an empty one.`);
    fs.mkdirSync(src, { recursive: true });
    return;
  }

  const files = fs.readdirSync(src);
  
  files.forEach(file => {
    const srcPath = path.join(src, file);
    const destPath = path.join(dest, file);
    
    if (fs.statSync(srcPath).isDirectory()) {
      // If it's a directory, ensure the destination directory exists and recurse
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      copyFiles(srcPath, destPath);
    } else if (shouldCopy(file)) {
      // If it's a supported file, copy it
      fs.copyFileSync(srcPath, destPath);
      console.log(`Copied: ${file}`);
    } else {
      console.log(`Skipped: ${file} (unsupported file type)`);
    }
  });
}

// Start the copying process
copyFiles(srcDir, distDir);
console.log('Build completed successfully!');